''' SBDoc - Small Basic Document Generator
''' Version 0.3b
''' Copyright Â© 2016 Nonki Takahashi.  The MIT License.
''' Program ID NPW862-0
'
ver = "0.3b"
GraphicsWindow.Title = "SBDoc " + ver
CRLF = Text.GetCharacter(13) + Text.GetCharacter(10)
WQ = Text.GetCharacter(34)
LT = "<"
Not = "False=True;True=False;"
ReadSettings()
Form()
While "True"
  If buttonClicked Then
    msg = ""
    settings["src"] = Controls.GetTextBoxText(tboxSrc)
    settings["out"] = Controls.GetTextBoxText(tboxOut)
    dir = settings["out"]
    File_DirectoryExists()
    If Not[exists] Then
      msg = "Folder " + dir + " created." + CRLF
      File.CreateDirectory(dir)
    EndIf 
    ofile = settings["out"] + "\index.html"
    Header()
    src = settings["src"]
    GenDoc()
    If findSub Then
      folders = File.GetDirectories(src)
      nFolders = Array.GetItemCount(folders)
      iFolders = Array.GetAllIndices(folders)
      For j = 1 To nFolders
        src = folders[iFolders[j]]
        GenDoc()
      EndFor
    EndIf
    Footer()
    msg = msg + "Output " + ofile + " generated." + CRLF
    WriteSettings()
    msg = msg + "Settings " + settingsFile + " saved."
    Shapes.SetText(txtMsg, msg)
    buttonClicked = "False"
  Else
    Program.Delay(200)
  EndIf
EndWhile
Sub Form
  ''' Draw input form
  gw = 598
  gh = 428
  GraphicsWindow.Width = gw
  GraphicsWindow.Height = gh
  GraphicsWindow.BackgroundColor = "LightGray"
  GraphicsWindow.BrushColor = "Black"
  fs = 16
  GraphicsWindow.FontSize = fs
  y = 10
  GraphicsWindow.DrawText(10, y, "SBDoc - Small Basic Document Generator")
  y = y + fs * 2
  fs = 12
  GraphicsWindow.FontSize = fs
  GraphicsWindow.DrawText(10, y, "Version " + ver)
  y = y + fs * 2
  GraphicsWindow.DrawText(10, y, "Source Folder")
  tboxSrc = Controls.AddTextBox(100, y - 3)
  Controls.SetSize(tboxSrc, 480, 20)
  y = y + fs * 2
  Controls.SetTextBoxText(tboxSrc, settings["src"])
  GraphicsWindow.DrawText(10, y, "Output Folder")
  tboxOut = Controls.AddTextBox(100, y - 3)
  Controls.SetSize(tboxOut, 480, 20)
  Controls.SetTextBoxText(tboxOut, settings["out"])
  y = y + fs * 2
  Controls.AddButton("Run", 10, y)
  Controls.ButtonClicked = OnButtonClicked
  findSub = "False"
  msg = "Usage:" + CRLF
  msg = msg + "Input source and output folder names and push [Run] button."
  txtMsg = Shapes.AddText(msg)
  y = y + fs * 3
  Shapes.Move(txtMsg, 10, y)
EndSub
Sub OnButtonClicked
  ''' Button event handler
  buttonClicked = "True"
EndSub
Sub Footer
  ''' Generate footer
  ''' param ofile - output file
  html = LT + "hr>" + CRLF
  html = html + LT + "p>This document is created by SBDoc " + ver + "." + CRLF
  html = html + LT + "/p>" + CRLF
  html = html + LT + "/body>" + CRLF
  html = html + LT + "/html>" + CRLF
  File.AppendContents(ofile, html)
EndSub
Sub ReadSettings
  ''' Read settings
  ''' return settingsFile - settings file path
  ''' return settings - array for settings
  settingsFile = File.GetSettingsFilePath()
  settings = File.ReadContents(settingsFile)
  If settings["src"] = "" Then
    settings["src"] = Program.Directory
  EndIf
  If settings["out"] = "" Then
    settings["out"] = Program.Directory + "\out"
  EndIf
EndSub
Sub WriteSettings
  ''' Write settings
  ''' param settingsFile - settings file path
  ''' param settings - array for settings
  File.WriteContents(settingsFile, settings)
EndSub
Sub GenDoc
  ''' Generate documents in a folder
  ''' param ofile - output filename
  ''' param src - source folder
  files = File.GetFiles(src)
  nFiles = Array.GetItemCount(files)
  iFiles = Array.GetAllIndices(files)
  For i = 1 To nFiles
    ifile = files[iFiles[i]]
    lfile = Text.ConvertToLowerCase(ifile)
    If Text.EndsWith(lfile, ".sb") Or Text.EndsWith(lfile, ".smallbasic") Then 
      html = LT + "h1>" + ifile + LT + "/h1>" + CRLF
      buf = File.ReadContents(ifile)
      p = 1
      File_ReadLine()
      While Not[eof]
        IsDocument()
        If match Then
          html = html + doc + LT + "br>" + CRLF
        Else
          IsSub()
          If match Then
            html = html + LT + "h2>" + line + LT + "/h2>" + CRLF
          EndIf
        EndIf
        File_ReadLine()
      EndWhile
      File.AppendContents(ofile, html)
    EndIf
  EndFor
EndSub
Sub Header
  ''' Generate header
  ''' param ofile - output file
  html = LT + "!DOCTYPE html>" + CRLF
  html = html + LT + "html>" + CRLF
  html = html + LT + "head>" + CRLF
  html = html + LT + "meta charset=" + WQ + "utf-8" + WQ + ">" + CRLF
  html = html + LT + "link rel=" + WQ + "stylesheet" + WQ
  html = html + " href=" + WQ + "style.css" + WQ + ">" + CRLF
  html = html + LT + "/head>" + CRLF
  html = html + LT + "body>" + CRLF
  result = File.WriteContents(ofile, html)
EndSub
Sub IsSub
  ''' Check whether the line is a subroutine
  match = "False"
  If Text.StartsWith(Text.ConvertToLowerCase(line), "sub ") Then
    match = "True"
  EndIf
EndSub
Sub IsDocument
  ''' Check whether the line is a document
  ''' return doc
  match = "False"
  _p = 1
  While Text.GetSubText(line, _p, 1) = " "
    _p = _p + 1
  EndWhile
  cmark = "'''"
  If Text.StartsWith(Text.GetSubTextToEnd(line, _p), cmark) Then
    _p = _p + Text.GetLength(cmark)
    While Text.GetSubText(line, _p, 1) = "'"
      _p = _p + 1
    EndWhile
    While Text.GetSubText(line, _p, 1) = " "
      _p = _p + 1
    EndWhile
    doc = Text.GetSubTextToEnd(line, _p)
    match = "True"
  EndIf
EndSub
Sub File_DirectoryExists
  ''' File | check if the directory exists
  ''' param dir
  ''' return exists
  files = File.GetFiles(dir)
  If files = "FAILED" Then
    exists = "False"
  Else
    exists = "True"
  EndIf
EndSub
Sub File_ReadLine
  ''' File | read line from buf
  ''' param buf - buffer
  ''' param p - pointer to buffer
  ''' param eof - "True" if end of file
  ''' return line - line
  ''' return p - updated pointer to buffer
  nl = Text.GetIndexOf(Text.GetSubTextToEnd(buf, p), CRLF)
  If 0 < nl Then
    line = Text.GetSubText(buf, p, nl - 1)
    p = p + nl + 1
    eof = "False"
  Else
    line = Text.GetSubTextToEnd(buf, p)
    eof = "True"
  EndIf
EndSub
