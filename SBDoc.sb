' SBDoc - Small Basic Document Generator
' Version 0.5b
' Copyright Â© 2016-2017 Nonki Takahashi.  The MIT License.
' Last update 2017-05-21
' Program ID NPW862-2
' Repository https://github.com/nonkit/SBDoc

ver = "0.5b"
GraphicsWindow.Title = "SBDoc " + ver
Init()
ReadSettings()
Form()
While "True"
  If buttonClicked Then
    msg = ""
    settings["src"] = Controls.GetTextBoxText(tboxSrc)
    settings["out"] = Controls.GetTextBoxText(tboxOut)
    dir = settings["out"]
    File_DirectoryExists()
    If Not[exists] Then
      msg = "Folder " + dir + " created." + CRLF
      File.CreateDirectory(dir)
    EndIf 
    ofile = settings["out"] + "\index.html"
    Header()
    src = settings["src"]
    GenDoc()
    If findSub Then
      folders = File.GetDirectories(src)
      nFolders = Array.GetItemCount(folders)
      iFolders = Array.GetAllIndices(folders)
      For j = 1 To nFolders
        src = folders[iFolders[j]]
        GenDoc()
      EndFor
    EndIf
    Footer()
    msg = msg + "Output " + ofile + " generated." + CRLF
    WriteSettings()
    msg = msg + "Settings " + settingsFile + " saved."
    Shapes.SetText(txtMsg, msg)
    buttonClicked = "False"
  Else
    Program.Delay(200)
  EndIf
EndWhile

Sub Footer
  ' Generate footer
  ' param ofile - output file
  yyyy = Clock.Year
  mm = Clock.Month
  If mm < 10 Then
    mm = Text.Append(0, mm)
  EndIf
  dd = Clock.Day
  If dd < 10 Then
    dd = Text.Append(0, dd)
  EndIf
  html = LT + "hr>" + CRLF
  html = html + LT + "p>This document is created by "
  html = html + LT + "a href=" + WQ + "https://nonkit.github.io/SBDoc/"
  html = html + WQ + ">SBDoc" + LT + "/a> " + ver
  html = html + " on " + yyyy + "-" + mm + "-" + dd + "." + CRLF
  html = html + LT + "/p>" + CRLF
  html = html + LT + "/body>" + CRLF
  html = html + LT + "/html>" + CRLF
  File.AppendContents(ofile, html)
EndSub

Sub Form
  ' Draw input form
  gw = 598
  gh = 428
  GraphicsWindow.Width = gw
  GraphicsWindow.Height = gh
  GraphicsWindow.BackgroundColor = "LightGray"
  GraphicsWindow.BrushColor = "Black"
  fs = 16
  GraphicsWindow.FontSize = fs
  y = 10
  GraphicsWindow.DrawText(10, y, "SBDoc - Small Basic Document Generator")
  y = y + fs * 2
  fs = 12
  GraphicsWindow.FontSize = fs
  GraphicsWindow.DrawText(10, y, "Version " + ver)
  y = y + fs * 2
  GraphicsWindow.DrawText(10, y, "Source Folder")
  tboxSrc = Controls.AddTextBox(100, y - 3)
  Controls.SetSize(tboxSrc, 480, 20)
  y = y + fs * 2
  Controls.SetTextBoxText(tboxSrc, settings["src"])
  GraphicsWindow.DrawText(10, y, "Output Folder")
  tboxOut = Controls.AddTextBox(100, y - 3)
  Controls.SetSize(tboxOut, 480, 20)
  Controls.SetTextBoxText(tboxOut, settings["out"])
  y = y + fs * 2
  Controls.AddButton("Run", 10, y)
  Controls.ButtonClicked = OnButtonClicked
  findSub = "False"
  msg = "Usage:" + CRLF
  msg = msg + "Input source and output folder names and push [Run] button."
  txtMsg = Shapes.AddText(msg)
  y = y + fs * 3
  Shapes.Move(txtMsg, 10, y)
EndSub

Sub GenDoc
  ' Generate documents in a folder
  ' param ofile - output filename
  ' param src - source folder
  files = File.GetFiles(src)
  nFiles = Array.GetItemCount(files)
  iFiles = Array.GetAllIndices(files)
  For i = 1 To nFiles
    ifile = files[iFiles[i]]
    lfile = Text.ConvertToLowerCase(ifile)
    If Text.EndsWith(lfile, ".sb") Or Text.EndsWith(lfile, ".smallbasic") Then 
      html = LT + "h1>" + ifile + LT + "/h1>" + CRLF
      buf = File.ReadContents(ifile)
      p = 1
      File_ReadLine()
      top = "True"
      info = "True"
      While Not[eof] And info
        IsKeyword()
        If match Then
          If top Then
            html = html + LT + "h2>Program Information" + LT + "/h2>" + CRLF
            html = html + LT + "table>" + CRLF
            top = "False"
          EndIf
          html = html + LT + "tr>" + LT + "td>"
          html = html + LT + "b>
          html = html + keyword[k]
          html = html + LT + "/b>" + LT + "/td>"
          html = html + LT + "td>"
          If keyword[k] = "Repository" Then
            html = html + LT + "a href=" + WQ
            html = html + doc + WQ + ">"
          EndIf
          If keyword[k] = "Program ID" Then
            html = html + LT + "a href=" + WQ
            html = html + "http://smallbasic.com/program/?" + doc + WQ + ">"
          EndIf
          html = html + doc
          If keyword[k] = "Last update" Or keyword[k] = "Program ID" Then
            html = html + LT + "/a>"
          EndIf
          html = html + LT + "/td>" + LT + "tr>" + CRLF
        Else
          info = "False"
        EndIf
        File_ReadLine()
      EndWhile
      If Not[top] Then
        html = html + LT + "/table>" + CRLF
      EndIf
      html = html + LT + "h2>Subroutines" + LT + "/h2>" + CRLF
      top = "True"
      While Not[eof]
        IsDocument()
        If match Then
          html = html + doc + LT + "br>" + CRLF
        Else
          IsSub()
          If match Then
            If top Then
              top = "False"
            Else
              html = html + LT + "hr>" + CRLF
            EndIf
            html = html + LT + "img src=" + WQ + "img/IntellisenseSubroutine.png"
            html = html + WQ + " width=" + WQ + "64" + WQ + ">"
            html = html + LT + "h3> " + name + "()" + LT + "/h3>" + CRLF
          EndIf
        EndIf
        File_ReadLine()
      EndWhile
      File.AppendContents(ofile, html)
    EndIf
  EndFor
EndSub

Sub Header
  ' Generate header
  ' param ofile - output file
  html = LT + "!DOCTYPE html>" + CRLF
  html = html + LT + "html>" + CRLF
  html = html + LT + "head>" + CRLF
  html = html + LT + "meta charset=" + WQ + "utf-8" + WQ + ">" + CRLF
  html = html + LT + "link rel=" + WQ + "stylesheet" + WQ
  html = html + " href=" + WQ + "style.css" + WQ + ">" + CRLF
  html = html + LT + "/head>" + CRLF
  html = html + LT + "body>" + CRLF
  result = File.WriteContents(ofile, html)
EndSub

Sub Init
  ' Initialize varibles
  CRLF = Text.GetCharacter(13) + Text.GetCharacter(10)
  WQ = Text.GetCharacter(34)
  LT = "<"
  Not = "False=True;True=False;"
  keyword = "1=Title;2=Version;3=Copyright;4=Repository;5=Challenge;"
  keyword = keyword + "6=Program ID;7=Last update;8=param;9=return;"
EndSub

Sub IsDocument
  ' Check whether the line is a document
  ' return doc
  match = "False"
  doc = ""
  _p = 1
  While Text.GetSubText(line, _p, 1) = " "
    _p = _p + 1
  EndWhile
  cmark = "'"
  If Text.StartsWith(Text.GetSubTextToEnd(line, _p), cmark) Then
    _p = _p + Text.GetLength(cmark)
    While Text.GetSubText(line, _p, 1) = "'"
      _p = _p + 1
    EndWhile
    While Text.GetSubText(line, _p, 1) = " "
      _p = _p + 1
    EndWhile
    doc = Text.GetSubTextToEnd(line, _p)
    match = "True"
  EndIf
EndSub

Sub IsKeyword
  ' Check whether the line starts with a keyword
  ' return k - index of the keyword
  ' return doc
  ' return match - "True" if keyword
  match = "False"
  doc = ""
  _p = 1
  While Text.GetSubText(line, _p, 1) = " "
    _p = _p + 1
  EndWhile
  cmark = "'"
  If Text.StartsWith(Text.GetSubTextToEnd(line, _p), cmark) Then
    _p = _p + Text.GetLength(cmark)
    While Text.GetSubText(line, _p, 1) = "'"
      _p = _p + 1
    EndWhile
    While Text.GetSubText(line, _p, 1) = " "
      _p = _p + 1
    EndWhile
    ldoc = Text.ConvertToLowerCase(Text.GetSubTextToEnd(line, _p))
    _n = Array.GetItemCount(keyword)
    For _k = 1 To _n
      lkw = Text.ConvertToLowerCase(keyword[_k])
      If Text.StartsWith(ldoc, lkw) Then
        _p = _p + Text.GetLength(lkw)
        While Text.GetSubText(line, _p, 1) = " "
          _p = _p + 1
        EndWhile
        k = _k
        _k = _n
        doc = Text.GetSubTextToEnd(line, _p)
        match = "True"
      EndIf
    EndFor
    If Not[match] And top Then
      k = 1 ' Title
      doc = Text.GetSubTextToEnd(line, _p)
      match = "True"
    EndIf     
  EndIf
EndSub

Sub IsSub
  ' Check whether the line is a subroutine
  ' return name - subroutine name
  ' return match - "True" if subroutine
  match = "False"
  If Text.StartsWith(Text.ConvertToLowerCase(line), "sub ") Then
    name = Text.GetSubTextToEnd(line, 5)
    match = "True"
  EndIf
EndSub

Sub OnButtonClicked
  ' Button event handler
  buttonClicked = "True"
EndSub

Sub ReadSettings
  ' Read settings
  ' return settingsFile - settings file path
  ' return settings - array for settings
  settingsFile = File.GetSettingsFilePath()
  settings = File.ReadContents(settingsFile)
  If settings["src"] = "" Then
    settings["src"] = Program.Directory
  EndIf
  If settings["out"] = "" Then
    settings["out"] = Program.Directory + "\out"
  EndIf
EndSub

Sub WriteSettings
  ' Write settings
  ' param settingsFile - settings file path
  ' param settings - array for settings
  File.WriteContents(settingsFile, settings)
EndSub

Sub File_DirectoryExists
  ' File | check if the directory exists
  ' param dir
  ' return exists
  files = File.GetFiles(dir)
  If files = "FAILED" Then
    exists = "False"
  Else
    exists = "True"
  EndIf
EndSub

Sub File_ReadLine
  ' File | read line from buf
  ' param buf - buffer
  ' param p - pointer to buffer
  ' param eof - "True" if end of file
  ' return line - line
  ' return p - updated pointer to buffer
  nl = Text.GetIndexOf(Text.GetSubTextToEnd(buf, p), CRLF)
  If 0 < nl Then
    line = Text.GetSubText(buf, p, nl - 1)
    p = p + nl + 1
    eof = "False"
  Else
    line = Text.GetSubTextToEnd(buf, p)
    eof = "True"
  EndIf
EndSub
    